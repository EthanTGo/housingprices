dbinom(5,30,1/2 )
qbinom(0.5, prob=1/2)
qbinom(0.5, 15,prob=1/2)
qbinom(0.5, 5,prob=1/2)
qbinom(0.5, 5 ,1/2)
dbinom(5,30,1/2 )
dbinom(5,20,1/2 )
dbinom(5,10,1/2 )
dbinom(5,11,1/2 )
dbinom(5,13,1/2 )
pbinom(5,20,1/2 )
pbinom(5,40,1/2 )
pbinom(5,50,1/2 )
pbinom(5,10,1/2 )
pbinom(5,9,1/2 )
pbinom(5,12,1/2 )
pbinom(5,11,1/2 )
dnbinom()
dnbinom(5, 10, 1/2)
?dnbinom
x <- c(17, 31, 37, 43, 49, 59, 73)
x[x >= 10 & x <= 75 & x ]
myProduct <- function(data){
start = 1
for(number in data){
if(number / 10)
}
return(start)
}
as.integer(6.4)
6 %% 2
6 %% 5
myProduct <- function(data){
start = 1
for(number in data){
if(number %% 10 == 0)
start = start * number
}
return(start)
}
myProduct(c(2,10,4,20,8,6,30))
x[x >= 10 & x <= 75 & x %% 10 == 0]
x >= 10 & x <= 75 & x %% 10 == 0
sum(x >= 10 & x <= 75 & x %% 10 == 0)
and(x >= 10 & x <= 75 & x %% 10 == 0)
(x >= 10 & x <= 75 & x %% 10 == 0)
as.logical( (x >= 10 & x <= 75 & x %% 10 == 0))
is.logical( (x >= 10 & x <= 75 & x %% 10 == 0))
sum(x >= 10 & x <= 75 & x %% 10 == 0) > 0
sum(x >= 10 & x <= 75 & x %% 10 == 0) > 0
c <- c(3, 35, 43, 57, 65, 79, 89, 99)
x <- c(3, 35, 43, 57, 65, 79, 89, 99)
sum(x >= 10 & x <= 75 & x %% 10 == 0) > 0
# Problem 1 (between 10 and 75 & odd)
x <- c(17, 31, 37, 43, 49, 59, 73)
sum(x >= 10 & x <= 75 & x %% 10 == 0) > 0
sum((x >= 10) & (x <= 75)) > 0
x <- c(3, 35, 43, 57, 65, 79, 89, 99)
sum((x >= 10) & (x <= 75)) > 0
x <- c(3, 35, 43, 57, 65, 79, 89, 99)
sum((x >= 10) & (x <= 75)) > 0
sum((x >= 10) & (x <= 75))
# Problem 1 (between 10 and 75 & odd)
x <- c(17, 31, 37, 43, 49, 59, 73)
sum((x >= 10) & (x <= 75)) == length(x)
x <- c(3, 35, 43, 57, 65, 79, 89, 99)
sum((x >= 10) & (x <= 75)) == length(x)
# Problem 1 (between 10 and 75 & odd)
x <- c(17, 31, 37, 43, 49, 59, 73)
sum((x >= 10) & (x <= 75) & (x %% 2 == 0)) == length(x)
# Problem 1 (between 10 and 75 & odd)
x <- c(17, 31, 37, 43, 49, 59, 73)
sum((x >= 10) & (x <= 75) & (x %% 2 == 1)) == length(x)
x <- c(3, 35, 43, 57, 65, 79, 89, 99)
sum((x >= 10) & (x <= 75) & (x %% 2 == 1)) == length(x)
x <- c(30, 35, 43, 57, 65)
sum((x >= 10) & (x <= 75) & (x %% 2 == 1)) == length(x)
data <- c(615, 610, 740, 425, 850, 210, 725, 840, 635, 895, 485, 430, 165, 775, 620, 650, 575, 660, 880, 545, 315, 755, 675, 280)
sales <- matrix(data, ncol = 6, byrow = TRUE)
sales
sales[,max()]
?matrix
sales[row,]
for(row in nrow(sales)){
sales[row,]
}
for(row in nrow(sales)){
print(sales[row,])
}
for(row in nrow(sales)){
print(row)
print(sales[row,])
}
for(row in 1:nrow(sales)){
print(row)
print(sales[row,])
}
for(row in 1:nrow(sales)){
print(max(sales[row,]))
}
max_sales <- c()
for(row in 1:nrow(sales)){
max_sales <- c(max_sales,max(sales[row,]) )
print(max(sales[row,]))
}
indexof
print(sales[,col])
week <- c()
for (row in 1:nrow(sales)){
max <- max_sales[col]
for (col in 1:ncol(sales)){
if(sales[row,col] == max){
week <- c(week,col)
}
}
}
max_sales <- c()
for(row in 1:nrow(sales)){
max_sales <- c(max_sales,max(sales[row,]) )
print(max(sales[row,]))
}
week <- c()
for (row in 1:nrow(sales)){
max <- max_sales[col]
for (col in 1:ncol(sales)){
if(sales[row,col] == max){
week <- c(week,col)
}
}
}
week <- c()
for (row in 1:nrow(sales)){
max <- max_sales[row]
for (col in 1:ncol(sales)){
if(sales[row,col] == max){
week <- c(week,col)
}
}
}
week
max_sales - 835
for (row in 1:nrow(sales)){
placeholder <- 'exceeds'
max <- max(sales[row,])
for (col in 1:ncol(sales)){
if(sales[row,col] == max){
week <- col
}
}
if(max < 835){
placeholder <- 'trails'
}
paste("maximum sales of",max,'in Week',week,'and',placeholder,'by',str(max-835))
}
paste("maximum sales of",max,'in Week',week,'and',placeholder,'by',(max-835))
for (row in 1:nrow(sales)){
placeholder <- 'exceeds'
max <- max(sales[row,])
for (col in 1:ncol(sales)){
if(sales[row,col] == max){
week <- col
}
}
if(max < 835){
placeholder <- 'trails'
}
paste("maximum sales of",max,'in Week',week,'and',placeholder,'by',(max-835))
}
for (row in 1:nrow(sales)){
placeholder <- 'exceeds'
max <- max(sales[row,])
for (col in 1:ncol(sales)){
if(sales[row,col] == max){
week <- col
}
}
if(max < 835){
placeholder <- 'trails'
}
print(paste("maximum sales of",max,'in Week',week,'and',placeholder,'by',(max-835)))
}
for (num in 1:100){
if (pbinom(5,num,1/2 ) == 0.5){
print(num)
}
}
if (pbinom(5,num,1/2 ) == 0.5){
print(num)
}
for (num in 1:100){
if (pbinom(5,num,1/2 ) == 0.5){
print(num)
}
}
data <- c(615, 610, 740, 425, 850, 210, 725, 840, 635, 895, 485, 430, 165, 775, 620, 650, 575, 660, 880, 545, 315, 755, 675, 280)
for (num in 1:30){
if (pbinom(5,num,1/2 ) == 0.5){
print(num)
}
}
num
pbinom(5,11,1/2 ) == 0.5
pbinom(5,11,1/2 )
pbinom(5,11,1/2 ) = 0.5
pbinom(5,11,1/2 ) == '0.5'
for (num in 1:30){
if (pbinom(5,num,1/2 ) == '0.5'){
print(num)
}
}
rbinom
?rbinom
set.seed(123)
attempts <-
for(attempt in 1:100){
attempts <- c(attempts, rbinom(5,100,1/2))
}
set.seed(123)
attempts <- c()
for(attempt in 1:100){
attempts <- c(attempts, rbinom(5,100,1/2))
}
attempts
table(attempt)
table(attempts)
rbinom(5,100,1/2)
set.seed(123)
attempts <- c()
for(attempt in 1:100){
attempts <- c(attempts, rbinom(1,100,1/2))
}
table(attempts)
dbinom(5,100,1.2)
dbinom(5,100,1/2)
rnbinom(5,100,1/2)
dnbinom(5,100,1/2)
dnbinom(5,100,1/2)
pbinom
pbinom(5,15,1/2)
pbinom(5,20,1/2)
pbinom(10,20,1/2)
pbinom(10,10,1/2)
?PNBINOM
?pnbinom
?pbinom
pbinom(10,10,1/2)
pbinom(2,5,1/2)
dbinom(1,5,1/2)
dbinom(2,5,1/2)
dbinom(2,5,1/2) + dbinom(1,5,1/2)
pbinom(2,5,1/2)
dbinom(2,2,1/2) + dbinom(2,3,1/2)
dbinom(5,15,1/2)
dnbinom(5,15,1/2)
?dnbinom
pnbinom(5,15,1/2)
for (num in 1:30){
if (pbinom(5,num,1/2 ) == '0.5')
{    print(num)  }}
for (num in 1:30){
if (pnbinom(5,num,1/2 ) == '0.5')
{    print(num)  }}
pnbinom(5,6,1/2)
set.seed(123)
attempts <- c()
for(attempt in 1:100){
attempts <- c(attempts, rnbinom(5,100,1/2))
}
table(attempts)
attempts <- c(attempts, rnbinom(5,1/2))
attempts <- c(attempts, rnbinom(5,1:95,1/2))
set.seed(123)
attempts <- c()
for(attempt in 1:100){
attempts <- c(attempts, rnbinom(5,1:95,1/2))
}
table(attempts)
set.seed(123)
attempts <- c()
for(attempt in 1:100){
attempts <- c(attempts, rnbinom(5,5:95,1/2))
}
table(attempts)
install.packages("dbscan")
library("dbscan")
data(iris)
iris
# remove the last column which is text
iris <- as.matrix(iris[,1:4])
iris
plot(iris)
dbsres <- dbscan(iris, eps = .5, minPts = 5)
dbsres
plot(iris, col = dbsres$cluster + 1L)
# visualizaing with convex hull: hullplot(iris, dbsres)
iris
plot(iris)
dbsres <- dbscan(iris, eps = 1, minPts = 5)
dbsres
plot(iris, col = dbsres$cluster + 1L)
# visualizaing with convex hull: hullplot(iris, dbsres)
iris <- as.matrix(iris[,1:4])
iris
plot(iris)
dbsres <- dbscan(iris, eps = 3, minPts = 5)
dbsres
plot(iris, col = dbsres$cluster + 1L)
# visualizaing with convex hull: hullplot(iris, dbsres)
iris
plot(iris)
dbsres <- dbscan(iris, eps = 0.5, minPts = 5)
dbsres
plot(iris, col = dbsres$cluster + 1L)
# visualizaing with convex hull: hullplot(iris, dbsres)
set.seed(2)
n <- 400
df <- cbind( x = runif(4, 0, 1) + rnorm(n, sd = 0.1),
y = runif(4, 0, 1) + rnorm(n, sd = 0.1))
true_clusters <- rep(1:4, time = 100)
plot(df)
### run OPTICS
res <- optics(df, eps = 10, minPts = 10)
res
# reachability plot
plot(res)
# plot reachability in dendrogram
dend <- as.dendrogram(res)
dend
plot(dend, ylab = "Reachability dist.", leaflab = "none")
getwd()
setwd("/Users/ethango/Desktop/CS555/CS555-project")
housing_data = read.csv('housing.csv')
head(housing_data)
# This code will be different for your directory
getwd()
data <- read.csv('housing.csv)
data <- read.csv('housing.csv')
# This code will be different for your directory
getwd()
setwd("/Users/ethango/Desktop/CS555/CS555-project")
data <- read.csv('housing.csv')
getwd()
setwd("/Users/ethango/Desktop/CS555/CS555-project")
housing_data = read.csv('housing.csv')
# Goal
head(housing_data)
# Dropping Columns
# Goal
library(tidyverse)
glimpse(housing_data)
summary(data)
size(data)
shape(data)
libarary(tidyverse)
library(tidyverse)
glimpse(housing_data)
One of the ways we can reduce the dataset is through random sampling. This is basically choosing random samples without replacement from the dataset. Before doing that, we can start by seeing whether there are missing values in our datasets.
summary(data)
vis_miss(data)
library(ggplot)
library(ggplot2)
library(ggplot2)
summary(data)
vis_miss(data)
library(dplyr)
library(ggplot2)
library(dplyr)
summary(data)
vis_miss(data)
library(ggplot2)
library(dplyr)
library(visdat)
install.packages('visdat')
library(ggplot2)
library(dplyr)
library(visdat)
summary(data)
vis_dat(data)
is.na(data$total_bedrooms)
missing_val <- data[is.na(data$total_bedrooms)]
missing_val <- data[,is.na(data$total_bedrooms)]
missing_val <- data[is.na(data$total_bedrooms),]
missing_val
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar()
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count)
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count')
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count')
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + main(title = 'Distribution of Ocean Proximity in the Missing Data')
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitiel(title = 'Distribution of Ocean Proximity in the Missing Data')
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle(title = 'Distribution of Ocean Proximity in the Missing Data')
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data')
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data') +theme_minimal()
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data') +scale_color_gradientn(colours = rainbow(5))
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data') +scale_color_gradientn(colours = rainbow(5))
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data') + scale_fill_brewer(palette="Set1")
ggplot(data = missing_val, aes(x = ocean_proximity)) + geom_bar(palette="Set1") +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data')
ggplot(data = missing_val, aes(x = ocean_proximity, fill = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data')
ggplot(data = data, aes(x = ocean_proximity, fill = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity in the Missing Data')
no_missing_val
non_missing_val <- data[~is.na(data$total_bedrooms),]
non_missing_val <- data[!is.na(data$total_bedrooms),]
no_missing_val
non_missing_val <- data[-is.na(data$total_bedrooms),]
no_missing_val
non_missing_val <- data[! is.na(data$total_bedrooms),]
no_missing_val
non_missing_val <- data[! is.na(data$total_bedrooms),]
no_missing_val
non_missing_val
is.na(data$total_bedrooms)
?swrswor
srswor?
>s
?srswor
?srswor
data_sample <- srswor(2000, data)
library(sampling)
data_sample <- srswor(2000, data)
?srswor
dim(data)
dim(data)[1]
rows <- (1:nrow(data))[sample!=0]
nrow(data)
sample <- srswor(2000, dim(data)[1])
rows <- (1:nrow(data))[sample!=0]
rows <- rep(rows, sample[sample != 0])
sample.data <- data[rows, ]
sample.data
set.seed(42)
sample <- srswor(2000, dim(data)[1])
rows <- (1:nrow(data))[sample!=0]
rows <- rep(rows, sample[sample != 0])
sample.data <- data[rows, ]
sample.data
set.seed(42)
sample <- srswor(2000, dim(data)[1])
rows <- (1:nrow(data))[sample!=0]
rows <- rep(rows, sample[sample != 0])
sample.data <- data[rows, ]
sample.data
set.seed(42)
sample <- srswor(2000, dim(data)[1])
rows <- (1:nrow(data))[sample!=0]
rows <- rep(rows, sample[sample != 0])
sample.data <- data[rows, ]
sample.data
ggplot(data = sample.data, aes(x = ocean_proximity, fill = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity')
ggplot(data = data, aes(x = ocean_proximity, fill = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity')
pairplot(sample.data)
pairs(sample.data)
pairs(sample.data)
num_data = sample.data[1,]
num_data
num_data = sample.data[,]
num_data
num_data = sample.data[,1]
num_data
num_data = sample.data[,]
num_data
pairs(sample.data)
num_data
num_data = sample.data[,1:9]
num_data
pairs(num.data)
pairs(num_data)
num_data = sample.data[,3:9]
num_data
pairs(num_data)
round(cor(num_data),2)
library(corrplot)
install.packages(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(num_data, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(num_data, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(sampling)
set.seed(42)
sample <- srswor(2000, dim(non_missing_val)[1])
rows <- (1:nrow(non_missing_val))[sample!=0]
rows <- rep(rows, sample[sample != 0])
sample.data <- non_missing_val[rows, ]
sample.data
ggplot(data = sample.data, aes(x = ocean_proximity, fill = ocean_proximity)) + geom_bar() +xlab('Ocean Proximity') + ylab('Count') + ggtitle('Distribution of Ocean Proximity')
num_data = sample.data[,3:9]
num_data
round(cor(num_data),2)
library(corrplot)
corrplot(num_data, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(num_data, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
library(corrplot)
corrplot(num_data, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
num_data = sample.data[,3:9]
num_data
round(cor(num_data),2)
corr_mat <- cor(num_data)
round(corr_mat,2)
corrplot(corr_mat, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
is.factor(sample.data$ocean_proximity)
sample.data$focean_proximity = factor(sample.data$ocean_proximity)
m1<- aov(median_house_value~focean_proximity,data=sample.data)
m1
summary(m1)
library(car)
Anova(lm(median_house_value~focean_proximity+total_bedrooms,data=sample.data), type=3)
